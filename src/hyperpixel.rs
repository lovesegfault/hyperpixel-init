use crate::gpio::{Gpio, PinMode};
use anyhow::Result;
use std::thread::sleep;
use std::time::Duration;

const CLK: u32 = 27;
const MOSI: u32 = 26;
const CS: u32 = 18;

fn write_9bit(gpio: &mut Gpio, command: u16) -> Result<()> {
    gpio.set_pin_level(CS, false)?;
    send_bits(gpio, command, 9)?;
    gpio.set_pin_level(CS, true)?;

    Ok(())
}

fn send_bits(gpio: &mut Gpio, data: u16, count: u16) -> Result<()> {
    const DELAY: u64 = 100;

    let mut mask = 1 << (count - 1);
    for _ in 0..count {
        gpio.set_pin_level(MOSI, (data & mask) > 0)?;
        mask >>= 1;

        gpio.set_pin_level(CLK, false)?;
        sleep(Duration::from_micros(DELAY));

        gpio.set_pin_level(CLK, true)?;
        sleep(Duration::from_micros(DELAY));
    }
    gpio.set_pin_level(MOSI, false)?;
    Ok(())
}

pub fn hyperpixel_configure(gpio: &mut crate::gpio::Gpio) -> Result<()> {
    // setup pins
    gpio.set_pin_level(CLK, false)?;
    gpio.set_pin_level(MOSI, false)?;
    gpio.set_pin_level(CS, true)?;

    gpio.set_pin_mode(CLK, PinMode::Out)?;
    gpio.set_pin_mode(MOSI, PinMode::Out)?;
    gpio.set_pin_mode(CS, PinMode::Out)?;

    // send commands
    [
        0x0ff, 0x1ff, 0x198, 0x106, 0x104, 0x101, 0x008, 0x110, 0x021, 0x109, 0x030, 0x102, 0x031,
        0x100, 0x040, 0x110, 0x041, 0x155, 0x042, 0x102, 0x043, 0x109, 0x044, 0x107, 0x050, 0x178,
        0x051, 0x178, 0x052, 0x100, 0x053, 0x16d, 0x060, 0x107, 0x061, 0x100, 0x062, 0x108, 0x063,
        0x100, 0x0a0, 0x100, 0x0a1, 0x107, 0x0a2, 0x10c, 0x0a3, 0x10b, 0x0a4, 0x103, 0x0a5, 0x107,
        0x0a6, 0x106, 0x0a7, 0x104, 0x0a8, 0x108, 0x0a9, 0x10c, 0x0aa, 0x113, 0x0ab, 0x106, 0x0ac,
        0x10d, 0x0ad, 0x119, 0x0ae, 0x110, 0x0af, 0x100, 0x0c0, 0x100, 0x0c1, 0x107, 0x0c2, 0x10c,
        0x0c3, 0x10b, 0x0c4, 0x103, 0x0c5, 0x107, 0x0c6, 0x107, 0x0c7, 0x104, 0x0c8, 0x108, 0x0c9,
        0x10c, 0x0ca, 0x113, 0x0cb, 0x106, 0x0cc, 0x10d, 0x0cd, 0x118, 0x0ce, 0x110, 0x0cf, 0x100,
        0x0ff, 0x1ff, 0x198, 0x106, 0x104, 0x106, 0x000, 0x120, 0x001, 0x10a, 0x002, 0x100, 0x003,
        0x100, 0x004, 0x101, 0x005, 0x101, 0x006, 0x198, 0x007, 0x106, 0x008, 0x101, 0x009, 0x180,
        0x00a, 0x100, 0x00b, 0x100, 0x00c, 0x101, 0x00d, 0x101, 0x00e, 0x100, 0x00f, 0x100, 0x010,
        0x1f0, 0x011, 0x1f4, 0x012, 0x101, 0x013, 0x100, 0x014, 0x100, 0x015, 0x1c0, 0x016, 0x108,
        0x017, 0x100, 0x018, 0x100, 0x019, 0x100, 0x01a, 0x100, 0x01b, 0x100, 0x01c, 0x100, 0x01d,
        0x100, 0x020, 0x101, 0x021, 0x123, 0x022, 0x145, 0x023, 0x167, 0x024, 0x101, 0x025, 0x123,
        0x026, 0x145, 0x027, 0x167, 0x030, 0x111, 0x031, 0x111, 0x032, 0x100, 0x033, 0x1ee, 0x034,
        0x1ff, 0x035, 0x1bb, 0x036, 0x1aa, 0x037, 0x1dd, 0x038, 0x1cc, 0x039, 0x166, 0x03a, 0x177,
        0x03b, 0x122, 0x03c, 0x122, 0x03d, 0x122, 0x03e, 0x122, 0x03f, 0x122, 0x040, 0x122, 0x052,
        0x110, 0x053, 0x110, 0x0ff, 0x1ff, 0x198, 0x106, 0x104, 0x107, 0x018, 0x11d, 0x017, 0x122,
        0x002, 0x177, 0x026, 0x1b2, 0x0e1, 0x179, 0x0ff, 0x1ff, 0x198, 0x106, 0x104, 0x100, 0x03a,
        0x160, 0x035, 0x100, 0x011, 0x100, -1, 0x029, 0x100, -1,
    ]
    .iter()
    .try_for_each(|c| match c {
        -1 => {
            std::thread::sleep(std::time::Duration::from_micros(120_000));
            Ok(())
        }
        c => write_9bit(gpio, *c as u16),
    })?;

    // revert pin modes
    gpio.set_pin_mode(CLK, PinMode::In)?;
    gpio.set_pin_mode(MOSI, PinMode::In)?;
    gpio.set_pin_mode(CS, PinMode::In)?;

    Ok(())
}
